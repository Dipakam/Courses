        -:    0:Source:mergesort.c
        -:    0:Graph:mergesort.gcno
        -:    0:Data:mergesort.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include<stdio.h>
        -:    2:#include<stdlib.h>
        1:    3:void PrintArray(int ** array,int size) {
        2:    4:  for(int i=0;i<size;i++){
        1:    5:    printf("%d %d\n",array[i][0],array[i][1] );
        -:    6:  }
        1:    7:  return;
        -:    8:}
    #####:    9:void PrintArrayCopy(int array[][2],int size) {
    #####:   10:  for(int i=0;i<size;i++){
    #####:   11:    printf("%d %d\n",array[i][0],array[i][1] );
        -:   12:  }
    #####:   13:  return;
        -:   14:}
        2:   15:void Merge(int arr1[][2],int arr2[][2],int size1,int size2,int ** final){
        2:   16:  int cur1=0,cur2=0,cur=0;
        2:   17:  int size = size1+size2;
        -:   18:  /*printf("Stsrt\n" );
        -:   19:  PrintArrayCopy(arr1,size1);
        -:   20:  PrintArrayCopy(arr2,size2);*/
        4:   21:  for(int i=0;i<size;i++){
        4:   22:    if(cur1==size1){
    #####:   23:      for(int j=cur2;j<size2;j++){
    #####:   24:        final[cur][0]=arr2[j][0];
    #####:   25:        final[cur][1]=arr2[j][1];
    #####:   26:        cur++;
        -:   27:      }
    #####:   28:      break;
        -:   29:    }
        4:   30:    else if(cur2==size2){
        5:   31:      for(int j=cur1;j<size1;j++){
        3:   32:        final[cur][0]=arr1[j][0];
        3:   33:        final[cur][1]=arr1[j][1];
        3:   34:        cur++;
        -:   35:      }
        2:   36:      break;
        -:   37:    }
        -:   38:    else{
        2:   39:      if(arr1[cur1][0]>=arr2[cur2][0]){
        2:   40:        final[cur][0]=arr2[cur2][0];
        2:   41:        final[cur][1]=arr2[cur2][1];
        2:   42:        cur2++;
        2:   43:        cur++;
        -:   44:      }
        -:   45:      else{
    #####:   46:        final[cur][0]=arr1[cur1][0];
    #####:   47:        final[cur][1]=arr1[cur1][1];
    #####:   48:        cur1++;
    #####:   49:        cur++;
        -:   50:      }
        -:   51:    }
        -:   52:  }
        -:   53:  /*printf("OP from function\n");
        -:   54:  PrintArray(final,size);*/
        2:   55:}
        5:   56:void Sort(int array[][2],int start,int end,int ** final){
        5:   57:  int size = end-start+1;
        5:   58:  if(end==start){
        3:   59:    return;
        -:   60:  }
        2:   61:  Sort(array,start,(start+end)/2,final);
        2:   62:  Sort(array,(start+end)/2+1,end,final);
        -:   63:  //printf("First half\n");
        -:   64:  //PrintArrayCopy(array+start,1+(end-start)/2);
        -:   65:  //printf("Second Half\n");
        -:   66:  //PrintArrayCopy(array+(start+end)/2+1,size-1-(end-start)/2);*/
        7:   67:  for(int i=start;i<=end;i++){
        5:   68:    array[i][0]=final[i][0];
        5:   69:    array[i][1]=final[i][1];
        -:   70:  }
        -:   71:  /*printf("Copying the elements\n");
        -:   72:  PrintArrayCopy(array+start,size);*/
        2:   73:  Merge(array+start,array+(start+end)/2+1,1+(end-start)/2,size-1-(end-start)/2,final+start);
        -:   74:  /*printf("Full array\n");
        -:   75:
        -:   76:  PrintArray(final+start,size);*/
        2:   77:  return;
        -:   78:}
        4:   79:int IsDom(int x1,int y1,int x2,int y2){
        4:   80:  if(x1==x2&&y1==y2){
    #####:   81:    return 0;
        -:   82:  }
        4:   83:  else if(x1>=x2&&y1>=y2){
        3:   84:    return 1;
        -:   85:  }
        1:   86:  else if(x1<=x2&y1<=y2){
        1:   87:    return 2;
        -:   88:  }
        -:   89:  else{
    #####:   90:    return 3;
        -:   91:  }
        -:   92:}
        2:   93:int MergeDom(int **A,int **B,int sizeA,int sizeB,int ** final){
        2:   94:  int cur=0;
        2:   95:  int indB=0;
        2:   96:  int ind=0;
        2:   97:  int excluded_ind[sizeB];
        -:   98:  /*printf("Array B\n" );
        -:   99:  PrintArray(B,sizeB);*/
        2:  100:  for(int i=0;i<sizeA;i++){
        2:  101:    if(IsDom(A[i][0],A[i][1],B[indB][0],B[indB][1])==2){
        1:  102:      break;
        -:  103:    }
        1:  104:    else if(IsDom(A[i][0],A[i][1],B[indB][0],B[indB][1])==3){
    #####:  105:      final[cur][0]=A[i][0];
    #####:  106:      final[cur][1]=A[i][1];
        -:  107:      //printf("3 :cur =%d\n",cur );
    #####:  108:      cur++;
        -:  109:    }
        1:  110:    else if(IsDom(A[i][0],A[i][1],B[indB][0],B[indB][1])==1){
        1:  111:      final[cur][0]=A[i][0];
        1:  112:      final[cur][1]=A[i][1];
        1:  113:      cur++;
        1:  114:      excluded_ind[ind]=indB;
        1:  115:      ind++;
        1:  116:      indB++;
        -:  117:      //printf("1: cur=%d",cur);
        1:  118:      if(indB==sizeB){
        1:  119:        break;
        -:  120:      }
        -:  121:    }
    #####:  122:    else if(IsDom(A[i][0],A[i][1],B[indB][0],B[indB][1])==0){
    #####:  123:      excluded_ind[ind]=indB;
    #####:  124:      indB++;
    #####:  125:      ind++;
        -:  126:    }
        -:  127:
        -:  128:  }
        -:  129:  /*printf("These were excluded \n %d",ind );
        -:  130:  for(int i=0;i<ind;i++){
        -:  131:    printf("%d %d\n",B[excluded_ind[i]][0],B[excluded_ind[i]][1] );
        -:  132:  }*/
        -:  133:  //printf("Cur=%d ,Array B \n",cur );
        -:  134:  //PrintArray(B,sizeB);
        2:  135:  int alt_ind=0;
        4:  136:  for(int j=0;j<sizeB;j++){
        2:  137:    if(ind>0&&j==excluded_ind[alt_ind]){
        1:  138:      alt_ind++;
        1:  139:      continue;
        -:  140:    }
        1:  141:    final[cur][0]=B[j][0];
        1:  142:    final[cur][1]=B[j][1];
        1:  143:    cur++;
        -:  144:  }
        2:  145:  return cur;
        -:  146:}
        5:  147:int Dom(int ** A,int size,int **B){
        5:  148:  if(size==1){
        3:  149:    B[0][0]=A[0][0];
        3:  150:    B[0][1]=A[0][1];
        -:  151:    //PrintArray(A,1);
        -:  152:    //printf("1 on call\n" );
        3:  153:    return size;
        -:  154:  }
        -:  155:  else{
        2:  156:    int size1 = size/2;
        2:  157:    int size2 = size - size1;
        -:  158:    int ** A1;
        -:  159:    int ** A2;
        2:  160:    A1=(int **)malloc(size1*sizeof(int *));
        4:  161:    for(int i=0;i<size1;i++){
        2:  162:      A1[i]=(int *)malloc(2*sizeof(int));
        -:  163:    }
        2:  164:    A2=(int **)malloc(size2*sizeof(int *));
        5:  165:    for(int i=0;i<size2;i++){
        3:  166:      A2[i]=(int *)malloc(2*sizeof(int));
        -:  167:    }
        -:  168:
        2:  169:    int size1a = Dom(A,size1,A1);
        2:  170:    int size2a = Dom(A+size1,size2,A2);
        2:  171:    size = MergeDom(A1,A2,size1a,size2a,B);
        -:  172:    /*printf("First Part\n");
        -:  173:    PrintArray(A1,size1a);
        -:  174:    printf("Second Part\n");
        -:  175:    PrintArray(A2,size2a);
        -:  176:    printf("merged part\n");
        -:  177:    PrintArray(B,size);*/
        4:  178:    for(int i=0;i<size1;i++){
        2:  179:      free(A1[i]);
        -:  180:    }
        5:  181:    for(int j=0;j<size2;j++){
        3:  182:      free(A2[j]);
        -:  183:    }
        2:  184:    free(A1);
        2:  185:    free(A2);
        -:  186:    //printf("%d on the call\n",size );
        2:  187:    return size;
        -:  188:
        -:  189:  }
        -:  190:}
        1:  191:int main(){
        -:  192:  int N;
        1:  193:  scanf("%d",&N );
        1:  194:  int A[N][2];
        4:  195:  for(int i=0;i<N;i++){
        3:  196:    scanf("%d",&A[i][0]);
        3:  197:    scanf("%d",&A[i][1]);
        -:  198:  }
        -:  199:  //PrintArray(A,N);
        -:  200:  int ** final,** finalc;
        1:  201:  final = (int **)malloc(N*sizeof(int *));
        1:  202:  finalc = (int **)malloc(N*sizeof(int *));
        4:  203:  for(int i=0;i<N;i++){
        3:  204:    final[i] = (int *)malloc(2*sizeof(int));
        3:  205:    finalc[i] = (int *)malloc(2*sizeof(int));
        -:  206:  }
        4:  207:  for(int i=0;i<N;i++){
        3:  208:    final[i][0]=A[i][0];
        3:  209:    final[i][1]=A[i][1];
        -:  210:  }
        1:  211:  Sort(A,0,N-1,final);
        1:  212:  int size = Dom(final,N,finalc);
        -:  213:  //printf("%d :size \n",size );
        -:  214:  //printf("finalc\n" );
        1:  215:  PrintArray(finalc,size);
        -:  216:  /*printf("Initial\n");
        -:  217:  PrintArray(final,N);*/
        4:  218:  for(int i=0;i<N;i++){
        3:  219:    free(*(final+i));
        3:  220:    free(*(finalc+i));
        -:  221:  }
        1:  222:  free(final);
        1:  223:  free(finalc);
        1:  224:  return 0;
        -:  225:}
